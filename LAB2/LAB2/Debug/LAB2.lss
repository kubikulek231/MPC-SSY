
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000184  00800200  000003c8  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e48  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016d6  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007fb  00000000  00000000  00003bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  000043fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ad0  00000000  00000000  00004594  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000612  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00005676  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a0 c0       	rjmp	.+320    	; 0x142 <__ctors_end>
   2:	00 00       	nop
   4:	bd c0       	rjmp	.+378    	; 0x180 <__bad_interrupt>
   6:	00 00       	nop
   8:	bb c0       	rjmp	.+374    	; 0x180 <__bad_interrupt>
   a:	00 00       	nop
   c:	b9 c0       	rjmp	.+370    	; 0x180 <__bad_interrupt>
   e:	00 00       	nop
  10:	b7 c0       	rjmp	.+366    	; 0x180 <__bad_interrupt>
  12:	00 00       	nop
  14:	b5 c0       	rjmp	.+362    	; 0x180 <__bad_interrupt>
  16:	00 00       	nop
  18:	b3 c0       	rjmp	.+358    	; 0x180 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b1 c0       	rjmp	.+354    	; 0x180 <__bad_interrupt>
  1e:	00 00       	nop
  20:	af c0       	rjmp	.+350    	; 0x180 <__bad_interrupt>
  22:	00 00       	nop
  24:	ad c0       	rjmp	.+346    	; 0x180 <__bad_interrupt>
  26:	00 00       	nop
  28:	ab c0       	rjmp	.+342    	; 0x180 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a9 c0       	rjmp	.+338    	; 0x180 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a7 c0       	rjmp	.+334    	; 0x180 <__bad_interrupt>
  32:	00 00       	nop
  34:	a5 c0       	rjmp	.+330    	; 0x180 <__bad_interrupt>
  36:	00 00       	nop
  38:	a3 c0       	rjmp	.+326    	; 0x180 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a1 c0       	rjmp	.+322    	; 0x180 <__bad_interrupt>
  3e:	00 00       	nop
  40:	9f c0       	rjmp	.+318    	; 0x180 <__bad_interrupt>
  42:	00 00       	nop
  44:	9d c0       	rjmp	.+314    	; 0x180 <__bad_interrupt>
  46:	00 00       	nop
  48:	9b c0       	rjmp	.+310    	; 0x180 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	99 c0       	rjmp	.+306    	; 0x180 <__bad_interrupt>
  4e:	00 00       	nop
  50:	97 c0       	rjmp	.+302    	; 0x180 <__bad_interrupt>
  52:	00 00       	nop
  54:	95 c0       	rjmp	.+298    	; 0x180 <__bad_interrupt>
  56:	00 00       	nop
  58:	93 c0       	rjmp	.+294    	; 0x180 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	91 c0       	rjmp	.+290    	; 0x180 <__bad_interrupt>
  5e:	00 00       	nop
  60:	8f c0       	rjmp	.+286    	; 0x180 <__bad_interrupt>
  62:	00 00       	nop
  64:	8d c0       	rjmp	.+282    	; 0x180 <__bad_interrupt>
  66:	00 00       	nop
  68:	8b c0       	rjmp	.+278    	; 0x180 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	89 c0       	rjmp	.+274    	; 0x180 <__bad_interrupt>
  6e:	00 00       	nop
  70:	87 c0       	rjmp	.+270    	; 0x180 <__bad_interrupt>
  72:	00 00       	nop
  74:	85 c0       	rjmp	.+266    	; 0x180 <__bad_interrupt>
  76:	00 00       	nop
  78:	83 c0       	rjmp	.+262    	; 0x180 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	81 c0       	rjmp	.+258    	; 0x180 <__bad_interrupt>
  7e:	00 00       	nop
  80:	7f c0       	rjmp	.+254    	; 0x180 <__bad_interrupt>
  82:	00 00       	nop
  84:	7d c0       	rjmp	.+250    	; 0x180 <__bad_interrupt>
  86:	00 00       	nop
  88:	7b c0       	rjmp	.+246    	; 0x180 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	79 c0       	rjmp	.+242    	; 0x180 <__bad_interrupt>
  8e:	00 00       	nop
  90:	77 c0       	rjmp	.+238    	; 0x180 <__bad_interrupt>
  92:	00 00       	nop
  94:	75 c0       	rjmp	.+234    	; 0x180 <__bad_interrupt>
  96:	00 00       	nop
  98:	73 c0       	rjmp	.+230    	; 0x180 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	71 c0       	rjmp	.+226    	; 0x180 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	6f c0       	rjmp	.+222    	; 0x180 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	6d c0       	rjmp	.+218    	; 0x180 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	6b c0       	rjmp	.+214    	; 0x180 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	69 c0       	rjmp	.+210    	; 0x180 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	67 c0       	rjmp	.+206    	; 0x180 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	65 c0       	rjmp	.+202    	; 0x180 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	63 c0       	rjmp	.+198    	; 0x180 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	61 c0       	rjmp	.+194    	; 0x180 <__bad_interrupt>
  be:	00 00       	nop
  c0:	5f c0       	rjmp	.+190    	; 0x180 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	5d c0       	rjmp	.+186    	; 0x180 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	5b c0       	rjmp	.+182    	; 0x180 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	59 c0       	rjmp	.+178    	; 0x180 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	57 c0       	rjmp	.+174    	; 0x180 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	55 c0       	rjmp	.+170    	; 0x180 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	53 c0       	rjmp	.+166    	; 0x180 <__bad_interrupt>
  da:	00 00       	nop
  dc:	51 c0       	rjmp	.+162    	; 0x180 <__bad_interrupt>
  de:	00 00       	nop
  e0:	4f c0       	rjmp	.+158    	; 0x180 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	4d c0       	rjmp	.+154    	; 0x180 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	4b c0       	rjmp	.+150    	; 0x180 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	49 c0       	rjmp	.+146    	; 0x180 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	47 c0       	rjmp	.+142    	; 0x180 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	45 c0       	rjmp	.+138    	; 0x180 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	43 c0       	rjmp	.+134    	; 0x180 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	41 c0       	rjmp	.+130    	; 0x180 <__bad_interrupt>
  fe:	00 00       	nop
 100:	3f c0       	rjmp	.+126    	; 0x180 <__bad_interrupt>
 102:	00 00       	nop
 104:	3d c0       	rjmp	.+122    	; 0x180 <__bad_interrupt>
 106:	00 00       	nop
 108:	3b c0       	rjmp	.+118    	; 0x180 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	39 c0       	rjmp	.+114    	; 0x180 <__bad_interrupt>
 10e:	00 00       	nop
 110:	37 c0       	rjmp	.+110    	; 0x180 <__bad_interrupt>
 112:	00 00       	nop
 114:	35 c0       	rjmp	.+106    	; 0x180 <__bad_interrupt>
 116:	00 00       	nop
 118:	33 c0       	rjmp	.+102    	; 0x180 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	31 c0       	rjmp	.+98     	; 0x180 <__bad_interrupt>
 11e:	00 00       	nop
 120:	2f c0       	rjmp	.+94     	; 0x180 <__bad_interrupt>
 122:	00 00       	nop
 124:	2d c0       	rjmp	.+90     	; 0x180 <__bad_interrupt>
 126:	00 00       	nop
 128:	2b c0       	rjmp	.+86     	; 0x180 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	29 c0       	rjmp	.+82     	; 0x180 <__bad_interrupt>
 12e:	00 00       	nop
 130:	27 c0       	rjmp	.+78     	; 0x180 <__bad_interrupt>
 132:	00 00       	nop
 134:	69 01       	movw	r12, r18
 136:	6c 01       	movw	r12, r24
 138:	75 01       	movw	r14, r10
 13a:	7c 01       	movw	r14, r24
 13c:	83 01       	movw	r16, r6
 13e:	8a 01       	movw	r16, r20
 140:	91 01       	movw	r18, r2

00000142 <__ctors_end>:
 142:	11 24       	eor	r1, r1
 144:	1f be       	out	0x3f, r1	; 63
 146:	cf ef       	ldi	r28, 0xFF	; 255
 148:	d1 e8       	ldi	r29, 0x81	; 129
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0c bf       	out	0x3c, r16	; 60

00000152 <__do_copy_data>:
 152:	13 e0       	ldi	r17, 0x03	; 3
 154:	a0 e0       	ldi	r26, 0x00	; 0
 156:	b2 e0       	ldi	r27, 0x02	; 2
 158:	e8 ec       	ldi	r30, 0xC8	; 200
 15a:	f3 e0       	ldi	r31, 0x03	; 3
 15c:	00 e0       	ldi	r16, 0x00	; 0
 15e:	0b bf       	out	0x3b, r16	; 59
 160:	02 c0       	rjmp	.+4      	; 0x166 <__do_copy_data+0x14>
 162:	07 90       	elpm	r0, Z+
 164:	0d 92       	st	X+, r0
 166:	a4 38       	cpi	r26, 0x84	; 132
 168:	b1 07       	cpc	r27, r17
 16a:	d9 f7       	brne	.-10     	; 0x162 <__do_copy_data+0x10>

0000016c <__do_clear_bss>:
 16c:	23 e0       	ldi	r18, 0x03	; 3
 16e:	a4 e8       	ldi	r26, 0x84	; 132
 170:	b3 e0       	ldi	r27, 0x03	; 3
 172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
 174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
 176:	a4 38       	cpi	r26, 0x84	; 132
 178:	b2 07       	cpc	r27, r18
 17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>
 17c:	69 d0       	rcall	.+210    	; 0x250 <main>
 17e:	22 c1       	rjmp	.+580    	; 0x3c4 <_exit>

00000180 <__bad_interrupt>:
 180:	3f cf       	rjmp	.-386    	; 0x0 <__vectors>

00000182 <UART_init>:
void UART_SendString(char *text) {
    while (*text != 0x00) {  // Explicitly check for null terminator
        UART_SendChar(*text);
        text++;
    }
}
 182:	9c 01       	movw	r18, r24
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	60 e2       	ldi	r22, 0x20	; 32
 18a:	71 ea       	ldi	r23, 0xA1	; 161
 18c:	87 e0       	ldi	r24, 0x07	; 7
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	d3 d0       	rcall	.+422    	; 0x338 <__divmodsi4>
 192:	21 50       	subi	r18, 0x01	; 1
 194:	31 09       	sbc	r19, r1
 196:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 19a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
 19e:	88 e1       	ldi	r24, 0x18	; 24
 1a0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 1a4:	08 95       	ret

000001a6 <UART_SendChar>:
 1a6:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 1aa:	95 ff       	sbrs	r25, 5
 1ac:	fc cf       	rjmp	.-8      	; 0x1a6 <UART_SendChar>
 1ae:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 1b2:	08 95       	ret

000001b4 <UART_GetChar>:
 1b4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 1b8:	88 23       	and	r24, r24
 1ba:	e4 f7       	brge	.-8      	; 0x1b4 <UART_GetChar>
 1bc:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 1c0:	08 95       	ret

000001c2 <UART_SendStringNewLine>:

void UART_SendStringNewLine(char *text) {
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
    while (*text != 0x00) {  // Explicitly check for null terminator
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <UART_SendStringNewLine+0xc>
        UART_SendChar(*text);
 1ca:	ed df       	rcall	.-38     	; 0x1a6 <UART_SendChar>
        text++;
 1cc:	21 96       	adiw	r28, 0x01	; 1
        text++;
    }
}

void UART_SendStringNewLine(char *text) {
    while (*text != 0x00) {  // Explicitly check for null terminator
 1ce:	88 81       	ld	r24, Y
 1d0:	81 11       	cpse	r24, r1
 1d2:	fb cf       	rjmp	.-10     	; 0x1ca <UART_SendStringNewLine+0x8>
        UART_SendChar(*text);
        text++;
    }
    UART_SendChar('\r');  // Carriage Return
 1d4:	8d e0       	ldi	r24, 0x0D	; 13
 1d6:	e7 df       	rcall	.-50     	; 0x1a6 <UART_SendChar>
    UART_SendChar('\n');  // New Line
 1d8:	8a e0       	ldi	r24, 0x0A	; 10
 1da:	e5 df       	rcall	.-54     	; 0x1a6 <UART_SendChar>
    UART_SendChar(0x00);  // Explicitly send NULL character
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	e3 df       	rcall	.-58     	; 0x1a6 <UART_SendChar>
 1e0:	df 91       	pop	r29
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <UART_SendStringNewLineColored>:
 1e6:	8c 01       	movw	r16, r24

// Function to send a colored string with a newline
void UART_SendStringNewLineColored(char *str, char *color_code) {
 1e8:	eb 01       	movw	r28, r22
    // Send the color code first
    while (*color_code != 0x00) {
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <UART_SendStringNewLineColored+0xa>
        UART_SendChar(*color_code);  // Send color code character by character
 1ec:	dc df       	rcall	.-72     	; 0x1a6 <UART_SendChar>
        color_code++;
 1ee:	21 96       	adiw	r28, 0x01	; 1
}

// Function to send a colored string with a newline
void UART_SendStringNewLineColored(char *str, char *color_code) {
    // Send the color code first
    while (*color_code != 0x00) {
 1f0:	88 81       	ld	r24, Y
 1f2:	81 11       	cpse	r24, r1
 1f4:	fb cf       	rjmp	.-10     	; 0x1ec <UART_SendStringNewLineColored+0x6>
        UART_SendChar(*color_code);  // Send color code character by character
        color_code++;
    }
    
    // Now send the string
    UART_SendStringNewLine(str);  // Send the string with a newline
 1f6:	c8 01       	movw	r24, r16
 1f8:	e4 df       	rcall	.-56     	; 0x1c2 <UART_SendStringNewLine>
    
    // Reset the color to default
    while (*RESET_COLOR != 0x00) {
        UART_SendChar(*RESET_COLOR);  // Send reset color code character by character
 1fa:	8b e1       	ldi	r24, 0x1B	; 27
 1fc:	d4 df       	rcall	.-88     	; 0x1a6 <UART_SendChar>
 1fe:	fd cf       	rjmp	.-6      	; 0x1fa <UART_SendStringNewLineColored+0x14>

00000200 <printMenu>:
 200:	8f e1       	ldi	r24, 0x1F	; 31
	UART_init(38400); //nastaveni rychlosti UARTu, 38400b/s
	stdout = &uart_str; //presmerovani STDOUT
}

void printMenu() {
	UART_SendStringNewLine("Welcome to interactive terminal!");
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	de df       	rcall	.-68     	; 0x1c2 <UART_SendStringNewLine>
	UART_SendStringNewLine("1 ...... turn on led 1");
 206:	80 e4       	ldi	r24, 0x40	; 64
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	db df       	rcall	.-74     	; 0x1c2 <UART_SendStringNewLine>
	UART_SendStringNewLine("2 ...... turn off led 1");
 20c:	87 e5       	ldi	r24, 0x57	; 87
 20e:	92 e0       	ldi	r25, 0x02	; 2
 210:	d8 df       	rcall	.-80     	; 0x1c2 <UART_SendStringNewLine>
	UART_SendStringNewLine("3 ...... turn on led 2");
 212:	8f e6       	ldi	r24, 0x6F	; 111
 214:	92 e0       	ldi	r25, 0x02	; 2
 216:	d5 df       	rcall	.-86     	; 0x1c2 <UART_SendStringNewLine>
	UART_SendStringNewLine("4 ...... turn off led 2");
 218:	86 e8       	ldi	r24, 0x86	; 134
 21a:	92 e0       	ldi	r25, 0x02	; 2
 21c:	d2 df       	rcall	.-92     	; 0x1c2 <UART_SendStringNewLine>
	UART_SendStringNewLine("5 ...... turn on led 3");
 21e:	8e e9       	ldi	r24, 0x9E	; 158
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	cf df       	rcall	.-98     	; 0x1c2 <UART_SendStringNewLine>
	UART_SendStringNewLine("6 ...... turn off led 3");
 224:	85 eb       	ldi	r24, 0xB5	; 181
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	cc df       	rcall	.-104    	; 0x1c2 <UART_SendStringNewLine>
 22a:	8d ec       	ldi	r24, 0xCD	; 205
	UART_SendStringNewLine("0 ...... clear");
 22c:	92 e0       	ldi	r25, 0x02	; 2
 22e:	c9 cf       	rjmp	.-110    	; 0x1c2 <UART_SendStringNewLine>
 230:	08 95       	ret

00000232 <cleanConsole>:
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
}

void cleanConsole() {
	for (int i = 0; i < 30; i++) {
 236:	c0 e0       	ldi	r28, 0x00	; 0
 238:	d0 e0       	ldi	r29, 0x00	; 0
 23a:	04 c0       	rjmp	.+8      	; 0x244 <cleanConsole+0x12>
        UART_SendStringNewLine("");  // Send an empty string which is just a newline
 23c:	8e e1       	ldi	r24, 0x1E	; 30
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	c0 df       	rcall	.-128    	; 0x1c2 <UART_SendStringNewLine>
	UART_SendStringNewLine("6 ...... turn off led 3");
	UART_SendStringNewLine("0 ...... clear");
}

void cleanConsole() {
	for (int i = 0; i < 30; i++) {
 242:	21 96       	adiw	r28, 0x01	; 1
 244:	ce 31       	cpi	r28, 0x1E	; 30
 246:	d1 05       	cpc	r29, r1
 248:	cc f3       	brlt	.-14     	; 0x23c <cleanConsole+0xa>
        UART_SendStringNewLine("");  // Send an empty string which is just a newline
    }
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <main>:

int main(void) {
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
 258:	2d 97       	sbiw	r28, 0x0d	; 13
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	f8 94       	cli
 25e:	de bf       	out	0x3e, r29	; 62
 260:	0f be       	out	0x3f, r0	; 63
 262:	cd bf       	out	0x3d, r28	; 61
    UART_init(38400);  // Initialize UART with 9600 baud
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	96 e9       	ldi	r25, 0x96	; 150
 268:	8c df       	rcall	.-232    	; 0x182 <UART_init>
	uint8_t test_sequence[] = { 'H', 'e', 'l', 'l', 'o', ' ', 'U', 'A', 'R', 'T', '\r', '\n', 0 };
 26a:	8d e0       	ldi	r24, 0x0D	; 13
 26c:	e0 e0       	ldi	r30, 0x00	; 0
 26e:	f2 e0       	ldi	r31, 0x02	; 2
 270:	de 01       	movw	r26, r28
 272:	11 96       	adiw	r26, 0x01	; 1
 274:	01 90       	ld	r0, Z+
 276:	0d 92       	st	X+, r0
 278:	8a 95       	dec	r24
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x24>

	for (uint8_t i = 0; test_sequence[i] != 0; i++) {
 27c:	10 e0       	ldi	r17, 0x00	; 0
		UART_SendChar(test_sequence[i]);  // Send each character
 27e:	02 c0       	rjmp	.+4      	; 0x284 <main+0x34>
 280:	92 df       	rcall	.-220    	; 0x1a6 <UART_SendChar>

int main(void) {
    UART_init(38400);  // Initialize UART with 9600 baud
	uint8_t test_sequence[] = { 'H', 'e', 'l', 'l', 'o', ' ', 'U', 'A', 'R', 'T', '\r', '\n', 0 };

	for (uint8_t i = 0; test_sequence[i] != 0; i++) {
 282:	1f 5f       	subi	r17, 0xFF	; 255
 284:	e1 e0       	ldi	r30, 0x01	; 1
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	ec 0f       	add	r30, r28
 28a:	fd 1f       	adc	r31, r29
 28c:	e1 0f       	add	r30, r17
 28e:	f1 1d       	adc	r31, r1
 290:	80 81       	ld	r24, Z
 292:	81 11       	cpse	r24, r1
 294:	f5 cf       	rjmp	.-22     	; 0x280 <main+0x30>
		UART_SendChar(test_sequence[i]);  // Send each character
	}
	
	DDRB |= (1 << DDB5) | (1 << DDB6);  // Set PORTB pins 5 and 6 as output
 296:	84 b1       	in	r24, 0x04	; 4
 298:	80 66       	ori	r24, 0x60	; 96
 29a:	84 b9       	out	0x04, r24	; 4
    DDRE |= (1 << DDE3);  // Set PORTE pin 3 as output
 29c:	8d b1       	in	r24, 0x0d	; 13
 29e:	88 60       	ori	r24, 0x08	; 8
	
	printMenu();
 2a0:	8d b9       	out	0x0d, r24	; 13
 2a2:	ae df       	rcall	.-164    	; 0x200 <printMenu>
	while (1) {
		uint8_t received = UART_GetChar();  // Wait for input
 2a4:	87 df       	rcall	.-242    	; 0x1b4 <UART_GetChar>
 2a6:	18 2f       	mov	r17, r24
		UART_SendStringNewLine("Your input is:");
 2a8:	8c ed       	ldi	r24, 0xDC	; 220
 2aa:	92 e0       	ldi	r25, 0x02	; 2
		UART_SendChar(received);
 2ac:	8a df       	rcall	.-236    	; 0x1c2 <UART_SendStringNewLine>
 2ae:	81 2f       	mov	r24, r17
		UART_SendChar('\r');
 2b0:	7a df       	rcall	.-268    	; 0x1a6 <UART_SendChar>
 2b2:	8d e0       	ldi	r24, 0x0D	; 13
 2b4:	78 df       	rcall	.-272    	; 0x1a6 <UART_SendChar>
		UART_SendChar('\n');
 2b6:	8a e0       	ldi	r24, 0x0A	; 10
 2b8:	76 df       	rcall	.-276    	; 0x1a6 <UART_SendChar>
 2ba:	81 2f       	mov	r24, r17

		switch (received) {
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	fc 01       	movw	r30, r24
 2c0:	f0 97       	sbiw	r30, 0x30	; 48
 2c2:	e7 30       	cpi	r30, 0x07	; 7
 2c4:	f1 05       	cpc	r31, r1
 2c6:	a0 f5       	brcc	.+104    	; 0x330 <main+0xe0>
 2c8:	88 27       	eor	r24, r24
 2ca:	e6 56       	subi	r30, 0x66	; 102
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	8f 4f       	sbci	r24, 0xFF	; 255
            case '0':
				cleanConsole();
 2d0:	4f c0       	rjmp	.+158    	; 0x370 <__tablejump2__>
 2d2:	af df       	rcall	.-162    	; 0x232 <cleanConsole>
				printMenu();
 2d4:	95 df       	rcall	.-214    	; 0x200 <printMenu>
 2d6:	e6 cf       	rjmp	.-52     	; 0x2a4 <main+0x54>
                break;  // Exit the program or break the outer loop
 2d8:	6b ee       	ldi	r22, 0xEB	; 235
            case '1':
                UART_SendStringNewLineColored("Turning LED 1 on!", GREEN_TEXT);
 2da:	72 e0       	ldi	r23, 0x02	; 2
 2dc:	81 ef       	ldi	r24, 0xF1	; 241
 2de:	92 e0       	ldi	r25, 0x02	; 2
 2e0:	82 df       	rcall	.-252    	; 0x1e6 <UART_SendStringNewLineColored>
 2e2:	85 b1       	in	r24, 0x05	; 5
				LED1ON;
 2e4:	8f 7d       	andi	r24, 0xDF	; 223
 2e6:	85 b9       	out	0x05, r24	; 5
				break;
 2e8:	dd cf       	rjmp	.-70     	; 0x2a4 <main+0x54>
            case '2':
                UART_SendStringNewLine("Turning LED 1 off!");
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	93 e0       	ldi	r25, 0x03	; 3
 2ee:	69 df       	rcall	.-302    	; 0x1c2 <UART_SendStringNewLine>
 2f0:	85 b1       	in	r24, 0x05	; 5
				LED1OFF;
 2f2:	80 62       	ori	r24, 0x20	; 32
 2f4:	85 b9       	out	0x05, r24	; 5
				break;
 2f6:	d6 cf       	rjmp	.-84     	; 0x2a4 <main+0x54>
	        case '3':
                UART_SendStringNewLine("Turning LED 2 on!");
 2f8:	86 e1       	ldi	r24, 0x16	; 22
 2fa:	93 e0       	ldi	r25, 0x03	; 3
 2fc:	62 df       	rcall	.-316    	; 0x1c2 <UART_SendStringNewLine>
				LED2ON;
 2fe:	85 b1       	in	r24, 0x05	; 5
 300:	8f 7b       	andi	r24, 0xBF	; 191
 302:	85 b9       	out	0x05, r24	; 5
				break;
 304:	cf cf       	rjmp	.-98     	; 0x2a4 <main+0x54>
            case '4':
                UART_SendStringNewLine("Turning LED 2 off!");
 306:	88 e2       	ldi	r24, 0x28	; 40
 308:	93 e0       	ldi	r25, 0x03	; 3
 30a:	5b df       	rcall	.-330    	; 0x1c2 <UART_SendStringNewLine>
				LED2OFF;
 30c:	85 b1       	in	r24, 0x05	; 5
 30e:	80 64       	ori	r24, 0x40	; 64
 310:	85 b9       	out	0x05, r24	; 5
				break;
 312:	c8 cf       	rjmp	.-112    	; 0x2a4 <main+0x54>
			case '5':
                UART_SendStringNewLine("Turning LED 3 on!");
 314:	8b e3       	ldi	r24, 0x3B	; 59
 316:	93 e0       	ldi	r25, 0x03	; 3
 318:	54 df       	rcall	.-344    	; 0x1c2 <UART_SendStringNewLine>
				LED3ON;
 31a:	8e b1       	in	r24, 0x0e	; 14
 31c:	87 7f       	andi	r24, 0xF7	; 247
 31e:	8e b9       	out	0x0e, r24	; 14
				break;
 320:	c1 cf       	rjmp	.-126    	; 0x2a4 <main+0x54>
            case '6':
                UART_SendStringNewLine("Turning LED 3 off!");
 322:	8d e4       	ldi	r24, 0x4D	; 77
 324:	93 e0       	ldi	r25, 0x03	; 3
 326:	4d df       	rcall	.-358    	; 0x1c2 <UART_SendStringNewLine>
 328:	8e b1       	in	r24, 0x0e	; 14
				LED3OFF;
 32a:	88 60       	ori	r24, 0x08	; 8
 32c:	8e b9       	out	0x0e, r24	; 14
 32e:	ba cf       	rjmp	.-140    	; 0x2a4 <main+0x54>
				break;
 330:	80 e6       	ldi	r24, 0x60	; 96
            default:
                UART_SendStringNewLine("Invalid input, please choose again.");
 332:	93 e0       	ldi	r25, 0x03	; 3
 334:	46 df       	rcall	.-372    	; 0x1c2 <UART_SendStringNewLine>
 336:	b6 cf       	rjmp	.-148    	; 0x2a4 <main+0x54>

00000338 <__divmodsi4>:
 338:	05 2e       	mov	r0, r21
				break;
 33a:	97 fb       	bst	r25, 7
 33c:	16 f4       	brtc	.+4      	; 0x342 <__divmodsi4+0xa>
 33e:	00 94       	com	r0
 340:	0f d0       	rcall	.+30     	; 0x360 <__negsi2>
 342:	57 fd       	sbrc	r21, 7
 344:	05 d0       	rcall	.+10     	; 0x350 <__divmodsi4_neg2>
 346:	1c d0       	rcall	.+56     	; 0x380 <__udivmodsi4>
 348:	07 fc       	sbrc	r0, 7
 34a:	02 d0       	rcall	.+4      	; 0x350 <__divmodsi4_neg2>
 34c:	46 f4       	brtc	.+16     	; 0x35e <__divmodsi4_exit>
 34e:	08 c0       	rjmp	.+16     	; 0x360 <__negsi2>

00000350 <__divmodsi4_neg2>:
 350:	50 95       	com	r21
 352:	40 95       	com	r20
 354:	30 95       	com	r19
 356:	21 95       	neg	r18
 358:	3f 4f       	sbci	r19, 0xFF	; 255
 35a:	4f 4f       	sbci	r20, 0xFF	; 255
 35c:	5f 4f       	sbci	r21, 0xFF	; 255

0000035e <__divmodsi4_exit>:
 35e:	08 95       	ret

00000360 <__negsi2>:
 360:	90 95       	com	r25
 362:	80 95       	com	r24
 364:	70 95       	com	r23
 366:	61 95       	neg	r22
 368:	7f 4f       	sbci	r23, 0xFF	; 255
 36a:	8f 4f       	sbci	r24, 0xFF	; 255
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	08 95       	ret

00000370 <__tablejump2__>:
 370:	ee 0f       	add	r30, r30
 372:	ff 1f       	adc	r31, r31
 374:	88 1f       	adc	r24, r24
 376:	8b bf       	out	0x3b, r24	; 59
 378:	07 90       	elpm	r0, Z+
 37a:	f6 91       	elpm	r31, Z
 37c:	e0 2d       	mov	r30, r0
 37e:	19 94       	eijmp

00000380 <__udivmodsi4>:
 380:	a1 e2       	ldi	r26, 0x21	; 33
 382:	1a 2e       	mov	r1, r26
 384:	aa 1b       	sub	r26, r26
 386:	bb 1b       	sub	r27, r27
 388:	fd 01       	movw	r30, r26
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <__udivmodsi4_ep>

0000038c <__udivmodsi4_loop>:
 38c:	aa 1f       	adc	r26, r26
 38e:	bb 1f       	adc	r27, r27
 390:	ee 1f       	adc	r30, r30
 392:	ff 1f       	adc	r31, r31
 394:	a2 17       	cp	r26, r18
 396:	b3 07       	cpc	r27, r19
 398:	e4 07       	cpc	r30, r20
 39a:	f5 07       	cpc	r31, r21
 39c:	20 f0       	brcs	.+8      	; 0x3a6 <__udivmodsi4_ep>
 39e:	a2 1b       	sub	r26, r18
 3a0:	b3 0b       	sbc	r27, r19
 3a2:	e4 0b       	sbc	r30, r20
 3a4:	f5 0b       	sbc	r31, r21

000003a6 <__udivmodsi4_ep>:
 3a6:	66 1f       	adc	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	1a 94       	dec	r1
 3b0:	69 f7       	brne	.-38     	; 0x38c <__udivmodsi4_loop>
 3b2:	60 95       	com	r22
 3b4:	70 95       	com	r23
 3b6:	80 95       	com	r24
 3b8:	90 95       	com	r25
 3ba:	9b 01       	movw	r18, r22
 3bc:	ac 01       	movw	r20, r24
 3be:	bd 01       	movw	r22, r26
 3c0:	cf 01       	movw	r24, r30
 3c2:	08 95       	ret

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
