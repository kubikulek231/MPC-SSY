
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800200  00000334  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cf5  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016aa  00000000  00000000  00002295  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000767  00000000  00000000  0000393f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  000040a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aa7  00000000  00000000  00004230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c2  00000000  00000000  00004cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00005299  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
   a:	00 00       	nop
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
  12:	00 00       	nop
  14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
  16:	00 00       	nop
  18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
  26:	00 00       	nop
  28:	a4 c0       	rjmp	.+328    	; 0x172 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
  32:	00 00       	nop
  34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
  36:	00 00       	nop
  38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
  42:	00 00       	nop
  44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
  4e:	00 00       	nop
  50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
  56:	00 00       	nop
  58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
  5e:	00 00       	nop
  60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
  62:	00 00       	nop
  64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
  66:	00 00       	nop
  68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
  6e:	00 00       	nop
  70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
  72:	00 00       	nop
  74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
  7e:	00 00       	nop
  80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
  82:	00 00       	nop
  84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
  86:	00 00       	nop
  88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
  8e:	00 00       	nop
  90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
  92:	00 00       	nop
  94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
  96:	00 00       	nop
  98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	64 c0       	rjmp	.+200    	; 0x172 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	62 c0       	rjmp	.+196    	; 0x172 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	60 c0       	rjmp	.+192    	; 0x172 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	5e c0       	rjmp	.+188    	; 0x172 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5c c0       	rjmp	.+184    	; 0x172 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	5a c0       	rjmp	.+180    	; 0x172 <__bad_interrupt>
  be:	00 00       	nop
  c0:	58 c0       	rjmp	.+176    	; 0x172 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	56 c0       	rjmp	.+172    	; 0x172 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	54 c0       	rjmp	.+168    	; 0x172 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	52 c0       	rjmp	.+164    	; 0x172 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	50 c0       	rjmp	.+160    	; 0x172 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	4e c0       	rjmp	.+156    	; 0x172 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	4c c0       	rjmp	.+152    	; 0x172 <__bad_interrupt>
  da:	00 00       	nop
  dc:	4a c0       	rjmp	.+148    	; 0x172 <__bad_interrupt>
  de:	00 00       	nop
  e0:	48 c0       	rjmp	.+144    	; 0x172 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	46 c0       	rjmp	.+140    	; 0x172 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	44 c0       	rjmp	.+136    	; 0x172 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	42 c0       	rjmp	.+132    	; 0x172 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	40 c0       	rjmp	.+128    	; 0x172 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	3e c0       	rjmp	.+124    	; 0x172 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	3c c0       	rjmp	.+120    	; 0x172 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	3a c0       	rjmp	.+116    	; 0x172 <__bad_interrupt>
  fe:	00 00       	nop
 100:	38 c0       	rjmp	.+112    	; 0x172 <__bad_interrupt>
 102:	00 00       	nop
 104:	36 c0       	rjmp	.+108    	; 0x172 <__bad_interrupt>
 106:	00 00       	nop
 108:	34 c0       	rjmp	.+104    	; 0x172 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	32 c0       	rjmp	.+100    	; 0x172 <__bad_interrupt>
 10e:	00 00       	nop
 110:	30 c0       	rjmp	.+96     	; 0x172 <__bad_interrupt>
 112:	00 00       	nop
 114:	2e c0       	rjmp	.+92     	; 0x172 <__bad_interrupt>
 116:	00 00       	nop
 118:	2c c0       	rjmp	.+88     	; 0x172 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	2a c0       	rjmp	.+84     	; 0x172 <__bad_interrupt>
 11e:	00 00       	nop
 120:	28 c0       	rjmp	.+80     	; 0x172 <__bad_interrupt>
 122:	00 00       	nop
 124:	26 c0       	rjmp	.+76     	; 0x172 <__bad_interrupt>
 126:	00 00       	nop
 128:	24 c0       	rjmp	.+72     	; 0x172 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	22 c0       	rjmp	.+68     	; 0x172 <__bad_interrupt>
 12e:	00 00       	nop
 130:	20 c0       	rjmp	.+64     	; 0x172 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	e4 e3       	ldi	r30, 0x34	; 52
 14c:	f3 e0       	ldi	r31, 0x03	; 3
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	a0 3e       	cpi	r26, 0xE0	; 224
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
 15e:	22 e0       	ldi	r18, 0x02	; 2
 160:	a0 ee       	ldi	r26, 0xE0	; 224
 162:	b2 e0       	ldi	r27, 0x02	; 2
 164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
 166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
 168:	a0 3e       	cpi	r26, 0xE0	; 224
 16a:	b2 07       	cpc	r27, r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
 16e:	50 d0       	rcall	.+160    	; 0x210 <main>
 170:	df c0       	rjmp	.+446    	; 0x330 <_exit>

00000172 <__bad_interrupt>:
 172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <UART_init>:
void UART_SendString(char *text) {
    while (*text != 0x00) {  // Explicitly check for null terminator
        UART_SendChar(*text);
        text++;
    }
}
 174:	9c 01       	movw	r18, r24
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	60 e2       	ldi	r22, 0x20	; 32
 17c:	71 ea       	ldi	r23, 0xA1	; 161
 17e:	87 e0       	ldi	r24, 0x07	; 7
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	98 d0       	rcall	.+304    	; 0x2b4 <__divmodsi4>
 184:	21 50       	subi	r18, 0x01	; 1
 186:	31 09       	sbc	r19, r1
 188:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 18c:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 196:	08 95       	ret

00000198 <UART_SendChar>:
 198:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 19c:	95 ff       	sbrs	r25, 5
 19e:	fc cf       	rjmp	.-8      	; 0x198 <UART_SendChar>
 1a0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 1a4:	08 95       	ret

000001a6 <UART_GetChar>:
 1a6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 1aa:	88 23       	and	r24, r24
 1ac:	e4 f7       	brge	.-8      	; 0x1a6 <UART_GetChar>
 1ae:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 1b2:	08 95       	ret

000001b4 <UART_SendStringNewLine>:

void UART_SendStringNewLine(char *text) {
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
    while (*text != 0x00) {  // Explicitly check for null terminator
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <UART_SendStringNewLine+0xc>
        UART_SendChar(*text);
 1bc:	ed df       	rcall	.-38     	; 0x198 <UART_SendChar>
        text++;
 1be:	21 96       	adiw	r28, 0x01	; 1
        text++;
    }
}

void UART_SendStringNewLine(char *text) {
    while (*text != 0x00) {  // Explicitly check for null terminator
 1c0:	88 81       	ld	r24, Y
 1c2:	81 11       	cpse	r24, r1
 1c4:	fb cf       	rjmp	.-10     	; 0x1bc <UART_SendStringNewLine+0x8>
        UART_SendChar(*text);
        text++;
    }
    UART_SendChar('\r');  // Carriage Return
 1c6:	8d e0       	ldi	r24, 0x0D	; 13
 1c8:	e7 df       	rcall	.-50     	; 0x198 <UART_SendChar>
    UART_SendChar('\n');  // New Line
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	e5 df       	rcall	.-54     	; 0x198 <UART_SendChar>
    UART_SendChar(0x00);  // Explicitly send NULL character
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	e3 df       	rcall	.-58     	; 0x198 <UART_SendChar>
 1d2:	df 91       	pop	r29
}
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <printMenu>:
 1d8:	8f e1       	ldi	r24, 0x1F	; 31
	UART_init(38400); //nastaveni rychlosti UARTu, 38400b/s
	stdout = &uart_str; //presmerovani STDOUT
}

void printMenu() {
	UART_SendStringNewLine("Welcome to interactive terminal!");
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	eb df       	rcall	.-42     	; 0x1b4 <UART_SendStringNewLine>
	UART_SendStringNewLine("1 ...... turn on led 1");
 1de:	80 e4       	ldi	r24, 0x40	; 64
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	e8 df       	rcall	.-48     	; 0x1b4 <UART_SendStringNewLine>
	UART_SendStringNewLine("2 ...... turn off led 1");
 1e4:	87 e5       	ldi	r24, 0x57	; 87
 1e6:	92 e0       	ldi	r25, 0x02	; 2
 1e8:	e5 df       	rcall	.-54     	; 0x1b4 <UART_SendStringNewLine>
	UART_SendStringNewLine("0 ...... exit");
 1ea:	8f e6       	ldi	r24, 0x6F	; 111
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	e2 cf       	rjmp	.-60     	; 0x1b4 <UART_SendStringNewLine>
 1f0:	08 95       	ret

000001f2 <cleanConsole>:
 1f2:	cf 93       	push	r28
}

void cleanConsole() {
 1f4:	df 93       	push	r29
	for (int i = 0; i < 20; i++) {
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <cleanConsole+0x12>
        UART_SendStringNewLine("");  // Send an empty string which is just a newline
 1fc:	8e e1       	ldi	r24, 0x1E	; 30
 1fe:	92 e0       	ldi	r25, 0x02	; 2
 200:	d9 df       	rcall	.-78     	; 0x1b4 <UART_SendStringNewLine>
	UART_SendStringNewLine("2 ...... turn off led 1");
	UART_SendStringNewLine("0 ...... exit");
}

void cleanConsole() {
	for (int i = 0; i < 20; i++) {
 202:	21 96       	adiw	r28, 0x01	; 1
 204:	c4 31       	cpi	r28, 0x14	; 20
 206:	d1 05       	cpc	r29, r1
 208:	cc f3       	brlt	.-14     	; 0x1fc <cleanConsole+0xa>
        UART_SendStringNewLine("");  // Send an empty string which is just a newline
    }
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <main>:

int main(void) {
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	2d 97       	sbiw	r28, 0x0d	; 13
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61
    UART_init(38400);  // Initialize UART with 9600 baud
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	96 e9       	ldi	r25, 0x96	; 150
 228:	a5 df       	rcall	.-182    	; 0x174 <UART_init>
	uint8_t test_sequence[] = { 'H', 'e', 'l', 'l', 'o', ' ', 'U', 'A', 'R', 'T', '\r', '\n', 0 };
 22a:	8d e0       	ldi	r24, 0x0D	; 13
 22c:	e0 e0       	ldi	r30, 0x00	; 0
 22e:	f2 e0       	ldi	r31, 0x02	; 2
 230:	de 01       	movw	r26, r28
 232:	11 96       	adiw	r26, 0x01	; 1
 234:	01 90       	ld	r0, Z+
 236:	0d 92       	st	X+, r0
 238:	8a 95       	dec	r24
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x24>

	for (uint8_t i = 0; test_sequence[i] != 0; i++) {
 23c:	10 e0       	ldi	r17, 0x00	; 0
		UART_SendChar(test_sequence[i]);  // Send each character
 23e:	02 c0       	rjmp	.+4      	; 0x244 <main+0x34>
 240:	ab df       	rcall	.-170    	; 0x198 <UART_SendChar>

int main(void) {
    UART_init(38400);  // Initialize UART with 9600 baud
	uint8_t test_sequence[] = { 'H', 'e', 'l', 'l', 'o', ' ', 'U', 'A', 'R', 'T', '\r', '\n', 0 };

	for (uint8_t i = 0; test_sequence[i] != 0; i++) {
 242:	1f 5f       	subi	r17, 0xFF	; 255
 244:	e1 e0       	ldi	r30, 0x01	; 1
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 0f       	add	r30, r28
 24a:	fd 1f       	adc	r31, r29
 24c:	e1 0f       	add	r30, r17
 24e:	f1 1d       	adc	r31, r1
 250:	80 81       	ld	r24, Z
 252:	81 11       	cpse	r24, r1
 254:	f5 cf       	rjmp	.-22     	; 0x240 <main+0x30>
		UART_SendChar(test_sequence[i]);  // Send each character
	}
	
		DDRB |= (1 << DDB5) | (1 << DDB6);  // Set PORTB pins 5 and 6 as output
 256:	84 b1       	in	r24, 0x04	; 4
 258:	80 66       	ori	r24, 0x60	; 96
 25a:	84 b9       	out	0x04, r24	; 4
    DDRE |= (1 << DDE3);  // Set PORTE pin 3 as output
 25c:	8d b1       	in	r24, 0x0d	; 13
 25e:	88 60       	ori	r24, 0x08	; 8
	
	while(1) {
		printMenu();
 260:	8d b9       	out	0x0d, r24	; 13
 262:	ba df       	rcall	.-140    	; 0x1d8 <printMenu>
		while (1) {
			uint8_t received = UART_GetChar();  // Wait for input
 264:	a0 df       	rcall	.-192    	; 0x1a6 <UART_GetChar>
 266:	18 2f       	mov	r17, r24
			UART_SendStringNewLine("Your input is:");
 268:	8d e7       	ldi	r24, 0x7D	; 125
 26a:	92 e0       	ldi	r25, 0x02	; 2
			UART_SendChar(received);
 26c:	a3 df       	rcall	.-186    	; 0x1b4 <UART_SendStringNewLine>
 26e:	81 2f       	mov	r24, r17
			UART_SendChar('\r');
 270:	93 df       	rcall	.-218    	; 0x198 <UART_SendChar>
 272:	8d e0       	ldi	r24, 0x0D	; 13
 274:	91 df       	rcall	.-222    	; 0x198 <UART_SendChar>
			UART_SendChar('\n');
 276:	8a e0       	ldi	r24, 0x0A	; 10
 278:	8f df       	rcall	.-226    	; 0x198 <UART_SendChar>
 27a:	11 33       	cpi	r17, 0x31	; 49

			switch (received) {
 27c:	49 f0       	breq	.+18     	; 0x290 <main+0x80>
 27e:	12 33       	cpi	r17, 0x32	; 50
 280:	71 f0       	breq	.+28     	; 0x29e <main+0x8e>
 282:	10 33       	cpi	r17, 0x30	; 48
                case '0':
                    UART_SendStringNewLine("Exiting...");
 284:	99 f4       	brne	.+38     	; 0x2ac <main+0x9c>
 286:	8c e8       	ldi	r24, 0x8C	; 140
 288:	92 e0       	ldi	r25, 0x02	; 2
 28a:	94 df       	rcall	.-216    	; 0x1b4 <UART_SendStringNewLine>
					cleanConsole();
 28c:	b2 df       	rcall	.-156    	; 0x1f2 <cleanConsole>
 28e:	ea cf       	rjmp	.-44     	; 0x264 <main+0x54>
                    break;  // Exit the program or break the outer loop
                case '1':
                    UART_SendStringNewLine("Turning LED 1 on!");
 290:	87 e9       	ldi	r24, 0x97	; 151
 292:	92 e0       	ldi	r25, 0x02	; 2
 294:	8f df       	rcall	.-226    	; 0x1b4 <UART_SendStringNewLine>
 296:	85 b1       	in	r24, 0x05	; 5
					LED1ON;
 298:	8f 7d       	andi	r24, 0xDF	; 223
 29a:	85 b9       	out	0x05, r24	; 5
					break;
 29c:	e3 cf       	rjmp	.-58     	; 0x264 <main+0x54>
                case '2':
                    UART_SendStringNewLine("Turning LED 1 off!");
 29e:	89 ea       	ldi	r24, 0xA9	; 169
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	88 df       	rcall	.-240    	; 0x1b4 <UART_SendStringNewLine>
 2a4:	85 b1       	in	r24, 0x05	; 5
					LED1OFF;
 2a6:	80 62       	ori	r24, 0x20	; 32
 2a8:	85 b9       	out	0x05, r24	; 5
 2aa:	dc cf       	rjmp	.-72     	; 0x264 <main+0x54>
					break;
 2ac:	8c eb       	ldi	r24, 0xBC	; 188
                default:
                    UART_SendStringNewLine("Invalid input, please choose again.");
 2ae:	92 e0       	ldi	r25, 0x02	; 2
 2b0:	81 df       	rcall	.-254    	; 0x1b4 <UART_SendStringNewLine>
 2b2:	d8 cf       	rjmp	.-80     	; 0x264 <main+0x54>

000002b4 <__divmodsi4>:
 2b4:	05 2e       	mov	r0, r21
					break;
 2b6:	97 fb       	bst	r25, 7
 2b8:	16 f4       	brtc	.+4      	; 0x2be <__divmodsi4+0xa>
 2ba:	00 94       	com	r0
 2bc:	0f d0       	rcall	.+30     	; 0x2dc <__negsi2>
 2be:	57 fd       	sbrc	r21, 7
 2c0:	05 d0       	rcall	.+10     	; 0x2cc <__divmodsi4_neg2>
 2c2:	14 d0       	rcall	.+40     	; 0x2ec <__udivmodsi4>
 2c4:	07 fc       	sbrc	r0, 7
 2c6:	02 d0       	rcall	.+4      	; 0x2cc <__divmodsi4_neg2>
 2c8:	46 f4       	brtc	.+16     	; 0x2da <__divmodsi4_exit>
 2ca:	08 c0       	rjmp	.+16     	; 0x2dc <__negsi2>

000002cc <__divmodsi4_neg2>:
 2cc:	50 95       	com	r21
 2ce:	40 95       	com	r20
 2d0:	30 95       	com	r19
 2d2:	21 95       	neg	r18
 2d4:	3f 4f       	sbci	r19, 0xFF	; 255
 2d6:	4f 4f       	sbci	r20, 0xFF	; 255
 2d8:	5f 4f       	sbci	r21, 0xFF	; 255

000002da <__divmodsi4_exit>:
 2da:	08 95       	ret

000002dc <__negsi2>:
 2dc:	90 95       	com	r25
 2de:	80 95       	com	r24
 2e0:	70 95       	com	r23
 2e2:	61 95       	neg	r22
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	8f 4f       	sbci	r24, 0xFF	; 255
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	08 95       	ret

000002ec <__udivmodsi4>:
 2ec:	a1 e2       	ldi	r26, 0x21	; 33
 2ee:	1a 2e       	mov	r1, r26
 2f0:	aa 1b       	sub	r26, r26
 2f2:	bb 1b       	sub	r27, r27
 2f4:	fd 01       	movw	r30, r26
 2f6:	0d c0       	rjmp	.+26     	; 0x312 <__udivmodsi4_ep>

000002f8 <__udivmodsi4_loop>:
 2f8:	aa 1f       	adc	r26, r26
 2fa:	bb 1f       	adc	r27, r27
 2fc:	ee 1f       	adc	r30, r30
 2fe:	ff 1f       	adc	r31, r31
 300:	a2 17       	cp	r26, r18
 302:	b3 07       	cpc	r27, r19
 304:	e4 07       	cpc	r30, r20
 306:	f5 07       	cpc	r31, r21
 308:	20 f0       	brcs	.+8      	; 0x312 <__udivmodsi4_ep>
 30a:	a2 1b       	sub	r26, r18
 30c:	b3 0b       	sbc	r27, r19
 30e:	e4 0b       	sbc	r30, r20
 310:	f5 0b       	sbc	r31, r21

00000312 <__udivmodsi4_ep>:
 312:	66 1f       	adc	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	88 1f       	adc	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	1a 94       	dec	r1
 31c:	69 f7       	brne	.-38     	; 0x2f8 <__udivmodsi4_loop>
 31e:	60 95       	com	r22
 320:	70 95       	com	r23
 322:	80 95       	com	r24
 324:	90 95       	com	r25
 326:	9b 01       	movw	r18, r22
 328:	ac 01       	movw	r20, r24
 32a:	bd 01       	movw	r22, r26
 32c:	cf 01       	movw	r24, r30
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
